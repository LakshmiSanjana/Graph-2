# https://leetcode.com/problems/minimize-malware-spread/description/

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        colors = [-1] * (n)
        color = 0

        def dfs(col,idx):
            if colors[idx] != -1:
                return 
            colors[idx] = col
            for j in range(n):
                if graph[idx][j] == 1:
                    dfs(col,j)

        for i in range(n):
            if colors[i] == -1:
                dfs(color,i)
                color += 1
        
        groups = [0] * (color)

        for i in range(n):
            groups[colors[i]] += 1
        
        initgrps = [0] * (color)
        for node in initial:
            initgrps[colors[node]] += 1

        result = float('inf')
        for node in initial:
            col = colors[node]
            cnt = initgrps[col]

            if cnt == 1:
                if result == float('inf'):
                    result = node
                elif groups[col] > groups[colors[result]]:
                    result = node
                
                elif groups[col] == groups[colors[result]] and node < result:
                    result = node
        
        if result == float('inf'):
            for node in initial:
                result = min(result, node)

        return result

# TC : O(n^2)
# SC: O(N)